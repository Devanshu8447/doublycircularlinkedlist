#include<stdio.h>
#include<stdlib.h>
struct dnode{
    int data;
    struct dnode*prev;
    struct dnode*next;
};
int count=0;
struct dnode*head=NULL;
struct dnode*tail=NULL;
struct dnode*getnode(char *str){
    struct dnode*newnode=(struct dnode*)malloc(sizeof(struct dnode));
    printf("%s\n",str);
    scanf("%d",&newnode->data);
    newnode->prev=NULL;
    newnode->next=NULL;
    return newnode;
  
}
void insert_at_beginning(){
    int choice=1;
    while(choice){
        struct dnode*newnode=getnode("Enter the value of node to insert at beginning:\n");
        if(head==NULL){
            head=tail=newnode;
            tail->next=head;
            tail->prev=head;
        }
        else{
            newnode->next = head;
            newnode->prev=tail;
            tail->next= newnode;
            head->prev=newnode;
            head=newnode;
        }
        count++;
        printf("Do you want to add more nodes at beginning?(0/1):\n");
        scanf("%d",&choice);
    }
}
void insert_at_end(){
    int choice = 1;
    while(choice){
        struct dnode*newnode=getnode("Enter the value of node to insert at end:\n");
        if(head==NULL){
             head=tail=newnode;
             tail->next=head;
             tail->prev=head;
        }
        else{
            newnode->prev=tail;
            newnode->next=head;
            tail->next=newnode;
            head->prev=newnode;
            tail=newnode;
        }
        count++;
        printf("Do you want to add more nodes at end?(0/1):\n");
        scanf("%d",&choice);
        
    }
}
void insert_at_specific_pos(){
    int pos;
    int i = 1;
    printf("Enter the position (1 to %d:\n",count);
    scanf("%d",&pos);
    struct dnode*newnode=getnode("Enter the value of node to insert at specific position:\n");
    if(pos<1||pos>count+1){
        printf("Invalid Position");
        
    }
    else if (pos==1){
        insert_at_beginning();
        return;
    }
    else if(pos==count+1){
        insert_at_end();
        return;
    }
    else{
        struct dnode*temp=head;
        while(i<pos-1){
            temp=temp->next;
            i++;
        }
        newnode->prev=temp;
        newnode->next=temp->next;
        temp->next->prev=newnode;
        temp->next=newnode;
        count++;
    }

    
}
void delete_from_beginning(){
    int choice = 1;
    while(choice){
        if(head==NULL){
           printf("Deletion not possible\n");
           return;
        }
        else{
         struct dnode*temp=head;
         tail->next=temp->next;
         temp->next->prev=tail;
         head=temp->next;
         free(temp);
         temp=NULL;
         count--;
         printf("Do you want to delete more nodes from beginning?(0/1):\n");
         scanf("%d",&choice);
        }
    }
}
void delete_from_end(){
    struct dnode*temp=tail->prev;
    struct dnode*todelete=tail;
    int choice=1;
    while(choice){
        if(head==NULL){
           printf("Deletion not possible\n");
           return;
        }
        else{
           temp->next=head;
           head->prev=temp;
           tail=temp;
           free(todelete);
           todelete=NULL;
           count--;
           printf("Do you want to delete more nodes from end?(0/1):\n");
           scanf("%d",&choice);
        }
    }
}
void delete_from_specific_position(){
    int pos;
    printf("Enter the position from where you want to delete the node:\n");
    scanf("%d",&pos);
    if(pos<1||pos>count){
       printf("Deletion not possible\n");
       return;
    }
    else if (pos==1){
        delete_from_beginning();
        return;
    }
    else if (pos==count){
        delete_from_end();
        return;
    }
    else{
        int i=1;
        struct dnode*temp=head;
        struct dnode*prev=NULL;
        while(i<pos){
            prev=temp;
            temp=temp->next;
            i++;
        }
        prev->next=temp->next;
        temp->next->prev=prev;
        free(temp);
        temp=NULL;
        count--;
    }
}
void print(struct dnode* head){
    printf("Doubly Circular Linked List:");
    printf("<-%d->",head->data);
    struct dnode*temp=head->next;
    while(temp!=head){
        printf("<-");
        printf("%d->",temp->data);
        temp=temp->next;
    }
    printf("\n");
}
int main(){
    int choice =1;
    while(choice){
        struct dnode*newnode;
        newnode=getnode("Enter the value of dnode:");
        if(head==NULL){
            head=tail=newnode;
            tail->next=head;
            tail->prev=head;
        }
        else{
            newnode->prev=tail;
            tail->next=newnode;
            tail=newnode;
            tail->next=head;
            head->prev=tail;
            
        }
        count++;
        printf("Do you want to add more nodes?(0/1):\n");
        scanf("%d",&choice);
        
    }
    print(head);
    insert_at_beginning();
    print(head);
    insert_at_end();
    print(head);
    insert_at_specific_pos();
    print(head);
    delete_from_beginning();
    print(head);
    delete_from_end();
    print(head);
    delete_from_specific_position();
    print(head);
}
